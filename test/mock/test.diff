diff --git a/bin/cli.js b/bin/cli.js
index 1e42374..e4164fe 100755
--- a/bin/cli.js
+++ b/bin/cli.js
@@ -11,86 +11,95 @@ const packageJson = JSON.parse(
   fs.readFileSync(path.join(dirname, '../package.json'), 'utf8'),
 );
 const program = new Command();
+const runTypes = ['test', 'review', 'commit'];
 
 program
   .version(packageJson.version, '-v, --version', 'output the current version')
   .description('Generate unit tests or review your code by chatgpt 4')
   .argument('<runType>', 'run type: test or review')
   .option('-k, --api-key <key>', 'Set the OpenAI API key')
   .option(
     '-t, --openai-session-token <token>',
     "OpenAI session token, 2 step to get token, If you don't set this, will use OPENAI_API_KEY, will cause fee by api key",
   )
   .option(
     '-pu, --openai-proxy-url <url>',
     'Proxy URL to use for OpenAI API requests',
   )
   .option('-m, --model <model>', 'OpenAI model to use')
   .option('-p, --prompt <prompt>', 'OpenAI prompt to use')
   .option('-mt, --max-tokens <tokens>', 'OpenAI max tokens to use')
   .option(
     '-e, --file-extensions <extensions>',
     'File extensions to read, example: .ts,.tsx',
   )
   .option(
     '-r, --read-type <type>',
     'Read files from directory or git stage, example: dir or git',
   )
   .option(
     '-s, --read-git-status <name>',
     'Read files from git stage by status default: A,R,M',
   )
   .option(
     '-d, --read-dir-name <name>',
     'Root name of the directory to read files from, example: src',
   )
   .option(
     '-f, --test-file-type <type>',
     'Generate test file type, example: test or spec',
   )
   .option(
     '-x, --test-file-extension <extension>',
     'Generate test file name extension, example: .ts or .js',
   )
   .option(
     '-n, --test-file-dir-name <name>',
     'Generate test file directory name, example: __tests__',
   )
   .option(
     '-w, --review-report-webhook <url>',
     'Webhook URL to send review report',
   )
   .action((runType, options) => {
+    if (!runTypes.includes(runType)) {
+      // exit with error
+      console.error(
+        `Invalid run type: ${runType}, please use one of ${runTypes.join(',')}`
+      );
+      process.exit(1);
+    }
+
     const userOptions = {
-      huskyGPTType: runType === 'test' ? 'test' : 'review',
+      huskyGPTType: runType,
       reviewTyping: options.reviewTyping,
       ...(options.apiKey && { openAIKey: options.apiKey }),
       ...(options.model && { openAIModel: options.model }),
       ...(options.prompt && { openAIPrompt: options.prompt }),
       ...(options.maxTokens && { openAIMaxTokens: Number(options.maxTokens) }),
       ...(options.fileExtensions && {
         readFileExtensions: options.fileExtensions,
       }),
       ...(options.readType && { readType: options.readType }),
       ...(options.readGitStatus && { readGitStatus: options.readGitStatus }),
       ...(options.readDirName && { readFilesRootName: options.readDirName }),
       ...(options.testFileType && { testFileType: options.testFileType }),
       ...(options.testFileExtension && {
         testFileNameExtension: options.testFileExtension,
       }),
       ...(options.testFileDirName && {
         testFileDirName: options.testFileDirName,
       }),
       ...(options.reviewReportWebhook && {
         reviewReportWebhook: options.reviewReportWebhook,
       }),
       ...(options.openAISessionToken && {
         openAISessionToken: options.openAISessionToken,
       }),
       ...(options.openAIProxyUrl && {
         openAIProxyUrl: options.openAIProxyUrl,
       }),
     };
 
     main(userOptions);
   });
diff --git a/prompt/summarize_file_diff.txt b/prompt/summarize_file_diff.txt
new file mode 100644
index 0000000..ac326a5
--- /dev/null
+++ b/prompt/summarize_file_diff.txt
@@ -0,0 +1,48 @@
+You are an expert programmer summarizing a git diff.
+Reminders about the git diff format:
+For every file, there are a few metadata lines, like (for example):
+```
+diff --git a/lib/index.js b/lib/index.js
+index aadf691..bfef603 100644
+--- a/lib/index.js
++++ b/lib/index.js
+```
+This means that `lib/index.js` was modified in this commit. Note that this is only an example.
+Then there is a specifier of the lines that were modified.
+A line starting with `+` means it was added.
+A line that starting with `-` means that line was deleted.
+A line that starts with neither `+` nor `-` is code given for context and better understanding.
+It is not part of the diff.
+After the git diff of the first file, there will be an empty line, and then the git diff of the next file.
+
+Do not include the file name as another part of the comment.
+Do not use the characters `[` or `]` in the summary.
+Write every summary comment in a new line.
+Comments should be in a bullet point list, each line starting with a `-`.
+The summary should not include comments copied from the code.
+The output should be easily readable. When in doubt, write fewer comments and not more. Do not output comments that
+simply repeat the contents of the file.
+Readability is top priority. Write only the most important comments about the diff.
+
+EXAMPLE SUMMARY COMMENTS:
+```
+- Raise the amount of returned recordings from `10` to `100`
+- Fix a typo in the github action name
+- Move the `octokit` initialization to a separate file
+- Add an OpenAI API for completions
+- Lower numeric tolerance for test files
+- Add 2 tests for the inclusive string split function
+```
+Most commits will have less comments than this examples list.
+The last comment does not include the file names,
+because there were more than two relevant files in the hypothetical commit.
+Do not include parts of the example in your summary.
+It is given only as an example of appropriate comments.
+
+
+THE GIT DIFF TO BE SUMMARIZED:
+```
+{{ file_diff }}
+```
+
+THE SUMMARY:
diff --git a/src/huskygpt/commit.ts b/src/huskygpt/commit.ts
new file mode 100644
index 0000000..e69de29
diff --git a/src/index.ts b/src/index.ts
index 06a6639..084f9f1 100644
--- a/src/index.ts
+++ b/src/index.ts
@@ -8,27 +8,36 @@ import { HuskyGPTTypeEnum, IUserOptions } from './types';
 const runMap: Record<HuskyGPTTypeEnum, () => void> = {
   [HuskyGPTTypeEnum.Test]: async () => {
     const testFilePaths = new ReadFiles();
     const huskygpt = new HuskyGPTTest();
 
     // Generate a test case for each file path
     for (const fileResult of testFilePaths.getFileResults()) {
       await huskygpt.run(fileResult);
     }
   },
   [HuskyGPTTypeEnum.Review]: async () => {
     const reviewFiles = new ReadFiles();
     const huskygpt = new HuskyGPTReview();
 
     // Review code for each file path
     for (const fileResult of reviewFiles.getFileResults()) {
       await huskygpt.run(fileResult);
     }
 
     // Publish the notices to the webhook channel
     huskygpt.publishNotice();
   },
+  [HuskyGPTTypeEnum.Commit]: async () => {
+    const reviewFiles = new ReadFiles();
+    const huskygpt = new HuskyGPTReview();
+
+    // Review code for each file path
+    for (const fileResult of reviewFiles.getFileResults()) {
+      console.log(fileResult);
+    }
+  },
 };
 
 /**
  * Main function for huskygpt
  */
diff --git a/src/types.ts b/src/types.ts
index 8a1281e..8295712 100644
--- a/src/types.ts
+++ b/src/types.ts
@@ -1,19 +1,20 @@
 /**
  * The run mode of the huskygpt
  * test - Run the test file generation
  * review - Run the review file generation
  */
 export enum HuskyGPTTypeEnum {
   Test = 'test',
   Review = 'review',
+  Commit = 'commit',
 }
 
 /**
  * The file extensions to search for
  * @enum {string}
  * @property {string} Directory - Read test files from directory
  * @property {string} GitStage - Read test files from git stage
  * @readonly
  * @type {ReadTypeEnum}
  * @default 'dir'
  */
diff --git a/b/c.js b/b/b.js
similarity index 54%
rename from b/c.js
rename to b/b.js
index b06734b..fac218d 100644
--- a/b/c.js
+++ b/b/b.js
@@ -1,2 +1,2 @@
-consolelog(20)
+consolelog(21)
 console.log('xx')

diff --git a/b/i.js b/b/i.js
deleted file mode 100644
index b2b9d55..0000000
--- a/b/i.js
+++ /dev/null
@@ -1,2 +0,0 @@
-consolelog(20)
-console.log('haha')