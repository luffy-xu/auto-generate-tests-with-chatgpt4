Here is a simple example of how to write a "models":
import { useState, useCallback } from 'react'

export default function use{{modelName}}() {
  {{manage api response data, and set to state}}
  const [user, setUser] = useState<LoginResult | undefined>()
  {{#if useLoading}}}
  const [loading, setLoading] = useState(false);
  {{here are some other state}}}

  const {{api method name}} = useCallback(({{payload}}: LoginParams): Promise<LoginResult | undefined> => {
    {{Call API from "services"}}
    {{#if useLoading}}
    setLoading(true);
    {{/if}}
    return {{api method name}}({{payload}})
      .then((response) => {
        {{setUser({{response}})}}
      })
      .catch((error) => {
        {{message.error(error.message)}}
      })
      .finally(() => {
        {{#if useLoading}}
        setLoading(false);
        {{/if}}
      });
  }, [])

  return {
    user,
    {{api method name}},
  }
}

Please note it's following umi useModel design. No need replay me any explain or usage.
